version: '2.1'

services:

  infinispan:
    image: infinispan/server:11.0.4.Final
    container_name: infinispan
    ports:
        - 11222:11222
    command: "/opt/infinispan/bin/server.sh -c infinispan-demo.xml"
    volumes:
      - ./infinispan/infinispan.xml:/opt/infinispan/server/conf/infinispan-demo.xml:z
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:11222/rest/v2/cache-managers/default/health/status" ]
      interval: 1s
      timeout: 1s
      retries: 50

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"

  prometheus:
    image: prom/prometheus:v2.8.0
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:6.6.1
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/:z
    environment:
      - PROMETHEUS_URL=http://prometheus:9090

  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-infinispan:${KOGITO_VERSION}
    ports:
      - "8180:8080"
    depends_on:
      kafka:
        condition: service_started
      infinispan:
        condition: service_healthy
    volumes:
      - ./data-index/persistence:/home/kogito/data/protobufs/
    environment:
      QUARKUS_INFINISPAN_CLIENT_SERVER_LIST: infinispan:11222
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/ 
      INFINISPAN_PROPS: '-Dinfinispan.client.hotrod.socket_timeout=5000 -Dinfinispan.client.hotrod.connect_timeout=5000 -Dinfinispan.client.hotrod.max_retries=5 -Dinfinispan.client.hotrod.client_intelligence=BASIC'

  management-console:
    container_name: management-console
    image: quay.io/kiegroup/kogito-management-console:${KOGITO_VERSION}
    ports:
      - 8280:8080
    depends_on:
      - data-index

  postgres:
      image: postgres
      volumes:
        - postgres_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password
  keycloak:
      image: quay.io/keycloak/keycloak:latest
      command: -Dkeycloak.profile.feature.upload_scripts=enabled
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        KEYCLOAK_IMPORT: /tmp/kogito-realm.json 
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
      ports:
        - 8280:8080
      volumes:
        - ./keycloak/config/kogito-realm.json:/tmp/kogito-realm.json
      depends_on:
        - postgres
  mongo:
      image: mongo:4.0.10
      ports:
        - 27017:27017
      volumes:
        - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
        - ./mongo-volume:/data/db
