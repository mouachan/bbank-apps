 # Maximum Java heap to be used during the native image generation
    quarkus.native.native-image-xmx=4g
    
    #force index of the model 
    quarkus.index-dependency.model.group-id=org.redhat.bbank
    quarkus.index-dependency.model.artifact-id=model
    

    # OIDC server (keycloak) connection config
    #quarkus.http.cors=true
    #quarkus.oidc.auth-server-url=https://keycloak-bbtest.apps.ocp4.ouachani.org/auth/realms/kogito
    #quarkus.oidc.client-id=loan
    #quarkus.oidc.credentials.secret=secret
    #quarkus.oidc.enabled=true
    #quarkus.http.auth.permission.authenticated.paths=/*                                 
    #quarkus.http.auth.permission.authenticated.policy=authenticated
    
    #kogito (data-index)
    kogito.service.url=LOAN_URL
    kogito.dataindex.http.url=DATA_INDEX_URL
    kogito.dataindex.ws.url=ws://data-index:8080
    quarkus.http.cors=true
    quarkus.infinispan-client.client-intelligence=BASIC

    # kafka loan service 
    mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=${kafka.bootstrap.servers}
    mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
    mp.messaging.outgoing.kogito_outgoing_stream.topic=loanapplication
    mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer

    mp.messaging.outgoing.kogito_outgoing_stream.bootstrap.servers=${kafka.bootstrap.servers}
    mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
    mp.messaging.incoming.kogito_incoming_stream.topic=result
    mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

    
